# - name: facts
#   ansible.builtin.debug:
#     var: ansible_facts

- name: APT update
  apt:
    update_cache: yes

- name: Install required packages
  ansible.builtin.apt:
    pkg:
      - ca-certificates
      - curl
      - dnsmasq
      - git
      - gnupg
      - lsb-release
      - net-tools
      - network-manager
      - nginx
      - openssh-server
      - openssl
      - python3
      - python3-pip
      - ufw
      - vim
      - rsyslog
      - snapd

- name: Install python module
  ansible.builtin.pip:
    name: ruamel.yaml

- name: Gather the package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Install zerotier-one
  ansible.builtin.shell:
    cmd: curl -s https://install.zerotier.com | sudo bash
  when: "'zerotier-one' not in ansible_facts.packages"

- name: Add syslog setting for cron
  ansible.builtin.copy:
    src: 99-cron.conf
    dest: /etc/rsyslog.d/99-cron.conf
  notify: reload-rsyslog

- name: Copy miconapl files (TS6000)
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode | default('0755') }}"
  with_items:
    - {
        "src": miconapl/nas-apps_1.0ubuntu170_amd64.deb,
        "dest": /tmp/nas-apps_1.0ubuntu170_amd64.deb,
      }
    - {
        "src": miconapl/70-buffalo-micon.rules,
        "dest": /etc/udev/rules.d/70-buffalo-micon.rules,
      }
    - { "src": miconapl/update-lcd, "dest": /usr/local/bin/update-lcd }
    - { "src": miconapl/disp-lcd, "dest": /usr/local/bin/disp-lcd }
    - { "src": miconapl/set-led, "dest": /usr/local/bin/set-led }
    - {
        "src": miconapl/50-miconapl-lcd,
        "dest": /etc/networkd-dispatcher/routable.d/50-miconapl-lcd,
      }
    - {
        "src": miconapl/50-miconapl-lcd,
        "dest": /etc/NetworkManager/dispatcher.d/50-miconapl-lcd,
      }
    - {
        "src": miconapl/miconapl.service,
        "dest": /etc/systemd/system/miconapl.service,
      }
  notify: reload-miconapl
  when: ansible_facts.board_name == 'TS6000'

- name: Install nas-apps
  ansible.builtin.apt:
    deb: /tmp/nas-apps_1.0ubuntu170_amd64.deb
  notify: reload-miconapl
  when: ansible_facts.board_name == 'TS6000'

# # nginx: キャッシュサーバー本体 / 各種ディレクトリ・Root CA証明書の作成
- name: Create nginx dirs
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default(omit) }}"
    group: "{{ item.group | default(omit) }}"
    mode: "{{ item.mode | default(omit)}}"
  with_items:
    - { "path": "{{ nginx_cache_dir }}/cache" }
    - { "path": "{{ nginx_cache_dir }}/temp" }
    - { "path": "{{ nginx_cache_dir }}/temp" }
    - { "path": /etc/nginx/sites-cache/ }
    - { "path": /etc/nginx/ssl/ca/ }

- name: check CA key
  stat:
    path: /etc/nginx/ssl/ca/ca.key
  register: ca_key_file

- name: create CA key
  openssl_privatekey:
    path: /etc/nginx/ssl/ca/ca.key
    size: 2048
    mode: 0600
  register: ca_key
  when: not ca_key_file.stat.exists

- name: create the CA CSR
  openssl_csr:
    path: /etc/nginx/ssl/ca/ca.csr
    privatekey_path: "{{ ca_key.filename }}"
    common_name: "{{ ssl_ca_cn }}"
  register: ca_csr
  when: not ca_key_file.stat.exists

- name: sign the CA CSR
  openssl_certificate:
    path: /etc/nginx/ssl/ca/ca.crt
    csr_path: "{{ ca_csr.filename }}"
    privatekey_path: "{{ ca_key.filename }}"
    provider: selfsigned
    selfsigned_not_after: "+3650d"
    mode: 0644
  register: ca_crt
  when: not ca_key_file.stat.exists

- name: Copy nginx files
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode | default('0755') }}"
  with_items:
    - {
        "src": nginx/proxy_common.conf,
        "dest": /etc/nginx/conf.d/proxy_common.conf,
      }
    - {
        "src": nginx/sites-cache,
        "dest": /etc/nginx/sites-available/sites-cache,
      }
    - {
        "src": nginx/nginx_count_access.py,
        "dest": /usr/local/bin/nginx_count_access.py,
      }
    - {
        "src": nginx/logrotate.d/nginx-buffalo,
        "dest": /etc/logrotate.d/nginx-buffalo,
      }

- name: Create nginx symbolic link
  ansible.builtin.file:
    src: ../sites-available/sites-cache
    dest: /etc/nginx/sites-enabled/sites-cache
    state: link

- name: Create cron entry
  ansible.builtin.cron:
    name: "nginx count access"
    minute: 1-59/5
    user: root
    job: "/usr/local/bin/nginx_count_access.py | logger -i -p cron.info -t 'nginx_count_access'"

- name: Create CoreDNS dirs
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default(omit) }}"
    group: "{{ item.group | default(omit) }}"
    mode: "{{ item.mode | default(omit)}}"
  with_items:
    - { "path": "/etc/coredns" }
    - { "path": "/var/log/coredns" }


- name: Copy CoreDNS files
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode | default('0755') }}"
  with_items:
    - {
        "src": "coredns/coredns-1.10.1-{{ansible_facts.architecture}}",
        "dest": "/usr/local/bin/coredns",
      }
    - {
        "src": "coredns/update-coredns-answer",
        "dest": "/usr/local/bin/update-coredns-answer",
      }
    - {
        "src": "coredns/10-coredns-answer",
        "dest": "/etc/networkd-dispatcher/routable.d/10-coredns-answer",
      }
    - {
        "src": "coredns/10-coredns-answer",
        "dest": "/etc/NetworkManager/dispatcher.d/10-coredns-answer",
      }
    - {
        "src": "coredns/logrotate",
        "dest": "/etc/logrotate.d/coredns-buffalo",
      }
    - {
        "src": "coredns/Corefile",
        "dest": "/etc/coredns/Corefile",
      }
    - {
        "src": "coredns/coredns.service",
        "dest": "/etc/systemd/system/coredns.service",
      }

- name: Copy config file
  ansible.builtin.copy:
    src: "proxy-server.yaml"
    dest: /etc/melco/


- name: Enable bridge filter
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
  with_items:
    - {"name":net.bridge.bridge-nf-call-arptables, "value":1}
    - {"name":net.bridge.bridge-nf-call-ip6tables, "value":1}
    - {"name":net.bridge.bridge-nf-call-iptables, "value":1}
    - {"name":net.ipv4.conf.zt0.route_localnet, "value":1}
    - {"name":net.ipv4.conf.all.arp_announce, "value":2}
    - {"name":net.ipv4.conf.all.arp_filter, "value":1}
    - {"name":net.ipv4.conf.all.arp_ignore, "value":1}

- name: Copy redirect rules
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode | default('0755') }}"
  with_items:
    - {
        "src": "iptables/update-redirect-rules",
        "dest": "/usr/local/bin/update-redirect-rules",
      }
    - {
        "src": "iptables/10-update-redirect-rules",
        "dest": "/etc/networkd-dispatcher/routable.d/10-update-redirect-rules",
      }
    - {
        "src": "iptables/10-update-redirect-rules",
        "dest": "/etc/NetworkManager/dispatcher.d/10-update-redirect-rules",
      }

- name: UFW allow everything and enable UFW
  community.general.ufw:
    default: allow
    direction: routed

- name: UFW allow http
  community.general.ufw:
    rule: allow
    proto: tcp
    port: 80

- name: UFW allow https
  community.general.ufw:
    rule: allow
    proto: tcp
    port: 443

- name: UFW allow DNS(tcp/udp)
  community.general.ufw:
    rule: allow
    port: 53

- name: UFW allow coredns on reverse
  community.general.ufw:
    rule: allow
    direction: in
    interface: br-reverse
    port: 3053
  when: proxy_mode == 'reverse'

- name: UFW allow coredns on br-inline when inline
  community.general.ufw:
    rule: allow
    direction: in
    interface: br-inline
    port: 4053
  when: proxy_mode == 'inline'

- name: UFW delete coredns on br-inline when reverse
  community.general.ufw:
    delete: true
    direction: in
    interface: br-inline
    port: 4053
  when: proxy_mode == 'reverse'

- name: UFW enable ip forwarding
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_file: /etc/ufw/sysctl.conf
  with_items:
    - {"name":net.ipv4.ip_forward, "value":1}
    - {"name":net.ipv6.conf.default.forwarding, "value":1}
    - {"name":net.ipv6.conf.all.forwarding, "value":1}

# ufw --force enable
# ufw reload


- name: Apply config
  ansible.builtin.shell:
    cmd: /usr/local/bin/apply_config.py --no-restart
