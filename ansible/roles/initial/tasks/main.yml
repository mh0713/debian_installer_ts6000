- name: APT update
  apt:
    update_cache: yes

- name: Install required packages
  ansible.builtin.apt:
    pkg:
      - ca-certificates
      - curl
      - dnsmasq
      - git
      - gnupg
      - lsb-release
      - net-tools
      - network-manager
      - nginx
      - openssh-server
      - openssl
      - python3
      - python3-pip
      - ufw
      - vim
      - rsyslog
      - snapd

- name: Install python module
  ansible.builtin.pip:
    name: ruamel.yaml

- name: Install zerotier-one
  ansible.builtin.shell:
    cmd: curl -s https://install.zerotier.com | sudo bash

- name: Add syslog setting for cron
  ansible.builtin.copy:
    src: 99-cron.conf
    dest: /etc/rsyslog.d/99-cron.conf
  notify: reload-rsyslog

- name: Copy miconapl files
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode | default('0755') }}"
  with_items:
    - {"src":miconapl/nas-apps_1.0ubuntu170_amd64.deb, "dest":/tmp/nas-apps_1.0ubuntu170_amd64.deb}
    - {"src":miconapl/70-buffalo-micon.rules, "dest":/etc/udev/rules.d/70-buffalo-micon.rules}
    - {"src":miconapl/update-lcd, "dest":/usr/local/bin/update-lcd}
    - {"src":miconapl/disp-lcd, "dest":/usr/local/bin/disp-lcd}
    - {"src":miconapl/set-led, "dest":/usr/local/bin/set-led}
    - {"src":miconapl/50-miconapl-lcd, "dest":/etc/networkd-dispatcher/routable.d/50-miconapl-lcd}
    - {"src":miconapl/50-miconapl-lcd, "dest":/etc/NetworkManager/dispatcher.d/50-miconapl-lcd}
    - {"src":miconapl/miconapl.service, "dest":/etc/systemd/system/miconapl.service}
  notify:
    reload-miconapl

- name: Install nas-apps
  ansible.builtin.apt:
    deb: /tmp/nas-apps_1.0ubuntu170_amd64.deb
  notify:
    reload-miconapl

# # nginx: キャッシュサーバー本体 / 各種ディレクトリ・Root CA証明書の作成
- name: Create nginx dirs
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default(omit) }}"
    group: "{{ item.group | default(omit) }}"
    mode: "{{ item.mode | default(omit)}}"
  with_items:
    - {"path":"{{ nginx_cache_dir }}/cache"}
    - {"path":"{{ nginx_cache_dir }}/temp"}
    - {"path":"{{ nginx_cache_dir }}/temp"}
    - {"path":/etc/nginx/sites-cache/}
    - {"path":/etc/nginx/ssl/ca/}

- name: check CA key
  stat:
    path: /etc/nginx/ssl/ca/ca.key
  register: ca_key
  
- name: create CA key
  openssl_privatekey:
    path: /etc/nginx/ssl/ca/ca.key
    size: 2048
    mode: 0600
  register: ca_key
  when: not ca_key.stat.exists

- name: create the CA CSR
  openssl_csr:
    path: /etc/nginx/ssl/ca/ca.csr
    privatekey_path: "{{ ca_key.filename }}"
    common_name: "{{ ssl_ca_cn }}"
  register: ca_csr
  when: not ca_key.stat.exists

- name: sign the CA CSR
  openssl_certificate:
    path: /etc/nginx/ssl/ca/ca.crt
    csr_path: "{{ ca_csr.filename }}"
    privatekey_path: "{{ ca_key.filename }}"
    provider: selfsigned
    selfsigned_not_after: "+3650d"
    mode: 0644
  register: ca_crt
  when: not ca_key.stat.exists

- name : Create nginx symbolic link
  ansible.builtin.file:
    src: ../sites-available/sites-cache
    dest: /etc/nginx/sites-enabled/sites-cache
    state: link
    
- name: Copy nginx files
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode | default('0755') }}"
  with_items:
    - {"src":nginx/proxy_common.conf, "dest":/etc/nginx/conf.d/proxy_common.conf}
    - {"src":nginx/sites-cache, "dest":/etc/nginx/sites-available/sites-cache}
    - {"src":nginx/nginx_count_access.py, "dest":/usr/local/bin/nginx_count_access.py}
    - {"src":nginx/logrotate.d/nginx-buffalo, "dest":/etc/logrotate.d/nginx-buffalo}
- name: Create cron entry
  ansible.builtin.cron:
    name: "nginx count access"
    minute: 1-59/5
    user: root
    job: "/usr/local/bin/nginx_count_access.py | logger -i -p cron.info -t 'nginx_count_access'"



